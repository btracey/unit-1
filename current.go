// This file is autogenerated by github.com/gonum/unit/autogen
// Changes should be made to the autogenerated template rather than this one

// Copyright Â©2014 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// Current represents an electric current in Amperes
type Current float64

const (
	Yottaampere Current = 1e24
	Zettaampere Current = 1e21
	Exaampere   Current = 1e18
	Petaampere  Current = 1e15
	Teraampere  Current = 1e12
	Gigaampere  Current = 1e9
	Megaampere  Current = 1e6
	Kiloampere  Current = 1e3
	Hectoampere Current = 1e2
	Decaampere  Current = 1e1
	Ampere      Current = 1.0
	Deciampere  Current = 1e-1
	Centiampere Current = 1e-2
	Milliampere Current = 1e-3
	Microampere Current = 1e-6
	Nanoampere  Current = 1e-9
	Picoampere  Current = 1e-12
	Femtoampere Current = 1e-15
	Attoampere  Current = 1e-18
	Zeptoampere Current = 1e-21
	Yoctoampere Current = 1e-24
)

// Unit converts the Current to a *Unit
func (a Current) Unit() *Unit {
	return New(float64(a), Dimensions{
		CurrentDim: 1,
	})
}

// Current allows Current to implement a Currenter interface
func (a Current) Current() Current {
	return a
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (a *Current) From(u Uniter) error {
	if !DimensionsMatch(u, Ampere) {
		*a = Current(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*a = Current(u.Unit().Value())
	return nil
}

func (a Current) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", a, float64(a))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		if !pOk {
			p = -1
		}
		w, wOk := fs.Width()
		if !wOk {
			w = -1
		}
		fmt.Fprintf(fs, "%*.*"+string(c), w, p, float64(a))
		fmt.Fprint(fs, " A")
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g A)", c, a, float64(a))
		return
	}
}
