// This file is autogenerated by github.com/gonum/unit/autogen
// Changes should be made to the autogenerated template rather than this one

// Copyright Â©2014 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// Conductance represents an electrical conductance in Siemens
type Conductance float64

const (
	Yottasiemens Conductance = 1e24
	Zettasiemens Conductance = 1e21
	Exasiemens   Conductance = 1e18
	Petasiemens  Conductance = 1e15
	Terasiemens  Conductance = 1e12
	Gigasiemens  Conductance = 1e9
	Megasiemens  Conductance = 1e6
	Kilosiemens  Conductance = 1e3
	Hectosiemens Conductance = 1e2
	Decasiemens  Conductance = 1e1
	Siemens      Conductance = 1.0
	Decisiemens  Conductance = 1e-1
	Centisiemens Conductance = 1e-2
	Millisiemens Conductance = 1e-3
	Microsiemens Conductance = 1e-6
	Nanosiemens  Conductance = 1e-9
	Picosiemens  Conductance = 1e-12
	Femtosiemens Conductance = 1e-15
	Attosiemens  Conductance = 1e-18
	Zeptosiemens Conductance = 1e-21
	Yoctosiemens Conductance = 1e-24
)

// Unit converts the Conductance to a *Unit
func (co Conductance) Unit() *Unit {
	return New(float64(co), Dimensions{
		CurrentDim: 2,
		MassDim:    -1,
		LengthDim:  -2,
		TimeDim:    3,
	})
}

// Conductance allows Conductance to implement a Conductanceer interface
func (co Conductance) Conductance() Conductance {
	return co
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (co *Conductance) From(u Uniter) error {
	if !DimensionsMatch(u, Siemens) {
		*co = Conductance(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*co = Conductance(u.Unit().Value())
	return nil
}

func (co Conductance) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", co, float64(co))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		if !pOk {
			p = -1
		}
		w, wOk := fs.Width()
		if !wOk {
			w = -1
		}
		fmt.Fprintf(fs, "%*.*"+string(c), w, p, float64(co))
		fmt.Fprint(fs, " S")
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g S)", c, co, float64(co))
		return
	}
}
