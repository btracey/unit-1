// This file is autogenerated by github.com/gonum/unit/autogen
// Changes should be made to the autogenerated template rather than this one

// Copyright Â©2014 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// Angle represents an angle in radians
type Angle float64

const (
	Degree Angle = 180 / math.Pi

	Yottaradian Angle = 1e24
	Zettaradian Angle = 1e21
	Exaradian   Angle = 1e18
	Petaradian  Angle = 1e15
	Teraradian  Angle = 1e12
	Gigaradian  Angle = 1e9
	Megaradian  Angle = 1e6
	Kiloradian  Angle = 1e3
	Hectoradian Angle = 1e2
	Decaradian  Angle = 1e1
	Radian      Angle = 1.0
	Deciradian  Angle = 1e-1
	Centiradian Angle = 1e-2
	Milliradian Angle = 1e-3
	Microradian Angle = 1e-6
	Nanoradian  Angle = 1e-9
	Picoradian  Angle = 1e-12
	Femtoradian Angle = 1e-15
	Attoradian  Angle = 1e-18
	Zeptoradian Angle = 1e-21
	Yoctoradian Angle = 1e-24
)

// Unit converts the Angle to a *Unit
func (a Angle) Unit() *Unit {
	return New(float64(a), Dimensions{})
}

// Angle allows Angle to implement a Angleer interface
func (a Angle) Angle() Angle {
	return a
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (a *Angle) From(u Uniter) error {
	if !DimensionsMatch(u, Radian) {
		*a = Angle(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*a = Angle(u.Unit().Value())
	return nil
}

func (a Angle) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", a, float64(a))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		if !pOk {
			p = -1
		}
		w, wOk := fs.Width()
		if !wOk {
			w = -1
		}
		fmt.Fprintf(fs, "%*.*"+string(c), w, p, float64(a))
		fmt.Fprint(fs, " rad")
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g rad)", c, a, float64(a))
		return
	}
}
