// This file is autogenerated by github.com/gonum/unit/autogen
// Changes should be made to the autogenerated template rather than this one

// Copyright ©2014 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// LuminousFlux represents a luminous flux in lumens
type LuminousFlux float64

const (
	Yottalumen LuminousFlux = 1e24
	Zettalumen LuminousFlux = 1e21
	Exalumen   LuminousFlux = 1e18
	Petalumen  LuminousFlux = 1e15
	Teralumen  LuminousFlux = 1e12
	Gigalumen  LuminousFlux = 1e9
	Megalumen  LuminousFlux = 1e6
	Kilolumen  LuminousFlux = 1e3
	Hectolumen LuminousFlux = 1e2
	Decalumen  LuminousFlux = 1e1
	Lumen      LuminousFlux = 1.0
	Decilumen  LuminousFlux = 1e-1
	Centilumen LuminousFlux = 1e-2
	Millilumen LuminousFlux = 1e-3
	Microlumen LuminousFlux = 1e-6
	Nanolumen  LuminousFlux = 1e-9
	Picolumen  LuminousFlux = 1e-12
	Femtolumen LuminousFlux = 1e-15
	Attolumen  LuminousFlux = 1e-18
	Zeptolumen LuminousFlux = 1e-21
	Yoctolumen LuminousFlux = 1e-24
)

// Unit converts the LuminousFlux to a *Unit
func (l LuminousFlux) Unit() *Unit {
	return New(float64(l), Dimensions{
		LuminousIntensityDim: 1,
	})
}

// LuminousFlux allows LuminousFlux to implement a LuminousFluxer interface
func (l LuminousFlux) LuminousFlux() LuminousFlux {
	return l
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (l *LuminousFlux) From(u Uniter) error {
	if !DimensionsMatch(u, Lumen) {
		*l = LuminousFlux(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*l = LuminousFlux(u.Unit().Value())
	return nil
}

func (l LuminousFlux) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", l, float64(l))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		if !pOk {
			p = -1
		}
		w, wOk := fs.Width()
		if !wOk {
			w = -1
		}
		fmt.Fprintf(fs, "%*.*"+string(c), w, p, float64(l))
		fmt.Fprint(fs, " Ω")
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g Ω)", c, l, float64(l))
		return
	}
}
