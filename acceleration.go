// This file is autogenerated by github.com/gonum/unit/autogen
// Changes should be made to the autogenerated template rather than this one

// Copyright Â©2014 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// Acceleration represents an acceleration in meters per second squared
type Acceleration float64

// Unit converts the Acceleration to a *Unit
func (a Acceleration) Unit() *Unit {
	return New(float64(a), Dimensions{
		LengthDim: 1,
		TimeDim:   -2,
	})
}

// Acceleration allows Acceleration to implement a Accelerationer interface
func (a Acceleration) Acceleration() Acceleration {
	return a
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (a *Acceleration) From(u Uniter) error {
	if !DimensionsMatch(u) {
		*a = Acceleration(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*a = Acceleration(u.Unit().Value())
	return nil
}

func (a Acceleration) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", a, float64(a))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		if !pOk {
			p = -1
		}
		w, wOk := fs.Width()
		if !wOk {
			w = -1
		}
		fmt.Fprintf(fs, "%*.*"+string(c), w, p, float64(a))
		fmt.Fprint(fs, " m/s^2")
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g m/s^2)", c, a, float64(a))
		return
	}
}
