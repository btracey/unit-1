// This file is autogenerated by github.com/gonum/unit/autogen
// Changes should be made to the autogenerated template rather than this one

// Copyright Â©2014 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// Pressure represents a pressure in Pascals
type Pressure float64

const (
	Bar        Pressure = 1e5
	Atmosphere Pressure = 1.01e5

	Yottapascal Pressure = 1e24
	Zettapascal Pressure = 1e21
	Exapascal   Pressure = 1e18
	Petapascal  Pressure = 1e15
	Terapascal  Pressure = 1e12
	Gigapascal  Pressure = 1e9
	Megapascal  Pressure = 1e6
	Kilopascal  Pressure = 1e3
	Hectopascal Pressure = 1e2
	Decapascal  Pressure = 1e1
	Pascal      Pressure = 1.0
	Decipascal  Pressure = 1e-1
	Centipascal Pressure = 1e-2
	Millipascal Pressure = 1e-3
	Micropascal Pressure = 1e-6
	Nanopascal  Pressure = 1e-9
	Picopascal  Pressure = 1e-12
	Femtopascal Pressure = 1e-15
	Attopascal  Pressure = 1e-18
	Zeptopascal Pressure = 1e-21
	Yoctopascal Pressure = 1e-24
)

// Unit converts the Pressure to a *Unit
func (p Pressure) Unit() *Unit {
	return New(float64(p), Dimensions{
		MassDim:   1,
		LengthDim: -1,
		TimeDim:   -2,
	})
}

// Pressure allows Pressure to implement a Pressureer interface
func (p Pressure) Pressure() Pressure {
	return p
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (p *Pressure) From(u Uniter) error {
	if !DimensionsMatch(u, Pascal) {
		*p = Pressure(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*p = Pressure(u.Unit().Value())
	return nil
}

func (p Pressure) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", p, float64(p))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		if !pOk {
			p = -1
		}
		w, wOk := fs.Width()
		if !wOk {
			w = -1
		}
		fmt.Fprintf(fs, "%*.*"+string(c), w, p, float64(p))
		fmt.Fprint(fs, " Pa")
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g Pa)", c, p, float64(p))
		return
	}
}
