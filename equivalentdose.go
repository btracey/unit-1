// This file is autogenerated by github.com/gonum/unit/autogen
// Changes should be made to the autogenerated template rather than this one

// Copyright Â©2014 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// EquivalentDose represents an equivalent dose of ionizing radiaton in sieverts
type EquivalentDose float64

const (
	Yottasievert EquivalentDose = 1e24
	Zettasievert EquivalentDose = 1e21
	Exasievert   EquivalentDose = 1e18
	Petasievert  EquivalentDose = 1e15
	Terasievert  EquivalentDose = 1e12
	Gigasievert  EquivalentDose = 1e9
	Megasievert  EquivalentDose = 1e6
	Kilosievert  EquivalentDose = 1e3
	Hectosievert EquivalentDose = 1e2
	Decasievert  EquivalentDose = 1e1
	Sievert      EquivalentDose = 1.0
	Decisievert  EquivalentDose = 1e-1
	Centisievert EquivalentDose = 1e-2
	Millisievert EquivalentDose = 1e-3
	Microsievert EquivalentDose = 1e-6
	Nanosievert  EquivalentDose = 1e-9
	Picosievert  EquivalentDose = 1e-12
	Femtosievert EquivalentDose = 1e-15
	Attosievert  EquivalentDose = 1e-18
	Zeptosievert EquivalentDose = 1e-21
	Yoctosievert EquivalentDose = 1e-24
)

// Unit converts the EquivalentDose to a *Unit
func (e EquivalentDose) Unit() *Unit {
	return New(float64(e), Dimensions{
		LengthDim: 2,
		TimeDim:   -2,
	})
}

// EquivalentDose allows EquivalentDose to implement a EquivalentDoseer interface
func (e EquivalentDose) EquivalentDose() EquivalentDose {
	return e
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (e *EquivalentDose) From(u Uniter) error {
	if !DimensionsMatch(u, Sievert) {
		*e = EquivalentDose(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*e = EquivalentDose(u.Unit().Value())
	return nil
}

func (e EquivalentDose) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", e, float64(e))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		if !pOk {
			p = -1
		}
		w, wOk := fs.Width()
		if !wOk {
			w = -1
		}
		fmt.Fprintf(fs, "%*.*"+string(c), w, p, float64(e))
		fmt.Fprint(fs, " Sv")
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g Sv)", c, e, float64(e))
		return
	}
}
