// This file is autogenerated by github.com/gonum/unit/autogen
// Changes should be made to the autogenerated template rather than this one

// Copyright Â©2014 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// Inductance represents an electrical inductance in henrys
type Inductance float64

const (
	Yottahenry Inductance = 1e24
	Zettahenry Inductance = 1e21
	Exahenry   Inductance = 1e18
	Petahenry  Inductance = 1e15
	Terahenry  Inductance = 1e12
	Gigahenry  Inductance = 1e9
	Megahenry  Inductance = 1e6
	Kilohenry  Inductance = 1e3
	Hectohenry Inductance = 1e2
	Decahenry  Inductance = 1e1
	Henry      Inductance = 1.0
	Decihenry  Inductance = 1e-1
	Centihenry Inductance = 1e-2
	Millihenry Inductance = 1e-3
	Microhenry Inductance = 1e-6
	Nanohenry  Inductance = 1e-9
	Picohenry  Inductance = 1e-12
	Femtohenry Inductance = 1e-15
	Attohenry  Inductance = 1e-18
	Zeptohenry Inductance = 1e-21
	Yoctohenry Inductance = 1e-24
)

// Unit converts the Inductance to a *Unit
func (in Inductance) Unit() *Unit {
	return New(float64(in), Dimensions{
		CurrentDim: -2,
		LengthDim:  2,
		MassDim:    1,
		TimeDim:    -2,
	})
}

// Inductance allows Inductance to implement a Inductanceer interface
func (in Inductance) Inductance() Inductance {
	return in
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (in *Inductance) From(u Uniter) error {
	if !DimensionsMatch(u, Henry) {
		*in = Inductance(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*in = Inductance(u.Unit().Value())
	return nil
}

func (in Inductance) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", in, float64(in))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		if !pOk {
			p = -1
		}
		w, wOk := fs.Width()
		if !wOk {
			w = -1
		}
		fmt.Fprintf(fs, "%*.*"+string(c), w, p, float64(in))
		fmt.Fprint(fs, " H")
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g H)", c, in, float64(in))
		return
	}
}
