// This file is autogenerated by github.com/gonum/unit/autogen
// Changes should be made to the autogenerated template rather than this one

// Copyright Â©2014 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// Density represents a density in kilograms per meters cubed
type Density float64

const (
	YottaKgPMCubed Density = 1e24
	ZettaKgPMCubed Density = 1e21
	ExaKgPMCubed   Density = 1e18
	PetaKgPMCubed  Density = 1e15
	TeraKgPMCubed  Density = 1e12
	GigaKgPMCubed  Density = 1e9
	MegaKgPMCubed  Density = 1e6
	KiloKgPMCubed  Density = 1e3
	HectoKgPMCubed Density = 1e2
	DecaKgPMCubed  Density = 1e1
	KgPMCubed      Density = 1.0
	DeciKgPMCubed  Density = 1e-1
	CentiKgPMCubed Density = 1e-2
	MilliKgPMCubed Density = 1e-3
	MicroKgPMCubed Density = 1e-6
	NanoKgPMCubed  Density = 1e-9
	PicoKgPMCubed  Density = 1e-12
	FemtoKgPMCubed Density = 1e-15
	AttoKgPMCubed  Density = 1e-18
	ZeptoKgPMCubed Density = 1e-21
	YoctoKgPMCubed Density = 1e-24
)

// Unit converts the Density to a *Unit
func (d Density) Unit() *Unit {
	return New(float64(d), Dimensions{
		MassDim:   1,
		LengthDim: -3,
	})
}

// Density allows Density to implement a Densityer interface
func (d Density) Density() Density {
	return d
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (d *Density) From(u Uniter) error {
	if !DimensionsMatch(u, KgPMCubed) {
		*d = Density(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*d = Density(u.Unit().Value())
	return nil
}

func (d Density) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", d, float64(d))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		if !pOk {
			p = -1
		}
		w, wOk := fs.Width()
		if !wOk {
			w = -1
		}
		fmt.Fprintf(fs, "%*.*"+string(c), w, p, float64(d))
		fmt.Fprint(fs, " kg/m^3")
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g kg/m^3)", c, d, float64(d))
		return
	}
}
